CREATE TABLE [FAXPEC].[RUBR_CONTATTI_BACKEND] (
    [ID_MAP]          NUMERIC (10) NOT NULL,
    [REF_ID_CANALE]   NUMERIC (10) NULL,
    [REF_ID_BACKEND]  NUMERIC (10) NULL,
    [REF_ID_CONTATTO] NUMERIC (10) NULL,
    [REF_ID_TITOLO]   NUMERIC (10) NULL,
    [REF_ID_ENTITA]   NUMERIC (10) NULL,
    CONSTRAINT [RUBR_CONTATTI_BACKEND_PK] PRIMARY KEY CLUSTERED ([ID_MAP] ASC),
    CONSTRAINT [FK_RUBR_CONTATTI_BACKEND_RUBR_CONTATT] FOREIGN KEY ([REF_ID_CONTATTO]) REFERENCES [FAXPEC].[RUBR_CONTATTI] ([ID_CONTACT]),
    CONSTRAINT [RUBR_CONTATTI_BACKEND_COM_FK1] FOREIGN KEY ([REF_ID_CANALE]) REFERENCES [FAXPEC].[COMUNICAZIONI_CANALI] ([ID_CANALE]),
    CONSTRAINT [RUBR_CONTATTI_BACKEND_COM_FK2] FOREIGN KEY ([REF_ID_TITOLO]) REFERENCES [FAXPEC].[COMUNICAZIONI_TITOLI] ([ID_TITOLO]),
    CONSTRAINT [RUBR_CONTATTI_BACKEND_RUB_FK1] FOREIGN KEY ([REF_ID_BACKEND]) REFERENCES [FAXPEC].[RUBR_BACKEND] ([ID_BACKEND])
);


GO

CREATE TRIGGER [FAXPEC].[InsteadOfInsertOn$RUBR_CONTATTI_BACKEND]
   ON [FAXPEC].[RUBR_CONTATTI_BACKEND]
    INSTEAD OF INSERT
      AS 
         /*Generated by SQL Server Migration Assistant for Oracle version 7.3.0.*/
         BEGIN

            SET  NOCOUNT  ON

            DECLARE
               @triggerType char(1)

            SELECT @triggerType = 'I'

            /* column variables declaration*/
            DECLARE           
               @new$ID_MAP numeric(10, 0), 
               @new$REF_ID_CANALE numeric(10, 0), 
               @new$REF_ID_BACKEND numeric(10, 0), 
               @new$REF_ID_CONTATTO numeric(10, 0), 
               @new$REF_ID_TITOLO numeric(10, 0), 
               @new$REF_ID_ENTITA numeric(10, 0)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT                    
                     ID_MAP, 
                     REF_ID_CANALE, 
                     REF_ID_BACKEND, 
                     REF_ID_CONTATTO, 
                     REF_ID_TITOLO, 
                     REF_ID_ENTITA
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO                
                  @new$ID_MAP, 
                  @new$REF_ID_CANALE, 
                  @new$REF_ID_BACKEND, 
                  @new$REF_ID_CONTATTO, 
                  @new$REF_ID_TITOLO, 
                  @new$REF_ID_ENTITA

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     IF (UPDATE(REF_ID_CONTATTO))
                        BEGIN

                           BEGIN TRY

                              IF @new$REF_ID_CONTATTO IS NOT NULL
                                 SELECT @new$REF_ID_ENTITA = isnull(RUBR_ENTITA.REF_ORG, RUBR_ENTITA.ID_REFERRAL)
                                 FROM FAXPEC.RUBR_ENTITA
                                 WHERE RUBR_ENTITA.ID_REFERRAL = 
                                    (
                                       SELECT RUBR_CONTATTI.REF_ID_REFERRAL
                                       FROM FAXPEC.RUBR_CONTATTI
                                       WHERE RUBR_CONTATTI.ID_CONTACT = @new$REF_ID_CONTATTO
                                    )
                                 
                                 /*
                                 *    ELSE
                                 *      :NEW."REF_ID_ENTITA" := '';
                                 */

                              IF @triggerType = 'I'
                                 BEGIN                                  
                                       SELECT @new$ID_MAP = NEXT VALUE FOR FAXPEC.RUBR_CONTATTI_BACKEND_SEQ
                                 END

                           END TRY

                           BEGIN CATCH

                              DECLARE
                                 @errornumber int

                              SET @errornumber = ERROR_NUMBER()

                              DECLARE
                                 @errormessage nvarchar(4000)

                              SET @errormessage = ERROR_MESSAGE()

                              DECLARE
                                 @exceptionidentifier nvarchar(4000)

                              SELECT @exceptionidentifier = 
                                 ssma_oracle.db_error_get_oracle_exception_id(@errormessage, @errornumber)

                              BEGIN
                                 BEGIN
                                    IF (@exceptionidentifier IS NOT NULL)
                                       BEGIN
                                          IF @errornumber = 59998
                                             RAISERROR(59998, 16, 1, @exceptionidentifier)
                                          ELSE 
                                             RAISERROR(59999, 16, 1, @exceptionidentifier)
                                       END
                                    ELSE 
                                       BEGIN
                                          EXECUTE 
                                             ssma_oracle.ssma_rethrowerror
                                       END
                                 END
                              END

                           END CATCH

                        END
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  INSERT FAXPEC.RUBR_CONTATTI_BACKEND(                    
                     ID_MAP, 
                     REF_ID_CANALE, 
                     REF_ID_BACKEND, 
                     REF_ID_CONTATTO, 
                     REF_ID_TITOLO, 
                     REF_ID_ENTITA)
                     VALUES (                        
                        @new$ID_MAP, 
                        @new$REF_ID_CANALE, 
                        @new$REF_ID_BACKEND, 
                        @new$REF_ID_CONTATTO, 
                        @new$REF_ID_TITOLO, 
                        @new$REF_ID_ENTITA)

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO                        
                        @new$ID_MAP, 
                        @new$REF_ID_CANALE, 
                        @new$REF_ID_BACKEND, 
                        @new$REF_ID_CONTATTO, 
                        @new$REF_ID_TITOLO, 
                        @new$REF_ID_ENTITA

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END

GO

CREATE TRIGGER [FAXPEC].[InsteadOfUpdateOn$RUBR_CONTATTI_BACKEND]
   ON [FAXPEC].[RUBR_CONTATTI_BACKEND]
    INSTEAD OF UPDATE
      AS 
         /*Generated by SQL Server Migration Assistant for Oracle version 7.3.0.*/
         BEGIN

            SET  NOCOUNT  ON

            DECLARE
               @triggerType char(1)

            SELECT @triggerType = 'U'

            /* column variables declaration*/
            DECLARE            
               @new$ID_MAP numeric(10, 0), 
               @new$REF_ID_CANALE numeric(10, 0), 
               @new$REF_ID_BACKEND numeric(10, 0), 
               @new$REF_ID_CONTATTO numeric(10, 0), 
               @new$REF_ID_TITOLO numeric(10, 0), 
               @new$REF_ID_ENTITA numeric(10, 0)

            DECLARE
                ForEachInsertedRowTriggerCursor CURSOR LOCAL FORWARD_ONLY READ_ONLY FOR 
                  SELECT                    
                     ID_MAP, 
                     REF_ID_CANALE, 
                     REF_ID_BACKEND, 
                     REF_ID_CONTATTO, 
                     REF_ID_TITOLO, 
                     REF_ID_ENTITA
                  FROM inserted

            OPEN ForEachInsertedRowTriggerCursor

            FETCH ForEachInsertedRowTriggerCursor
                INTO                
                  @new$ID_MAP, 
                  @new$REF_ID_CANALE, 
                  @new$REF_ID_BACKEND, 
                  @new$REF_ID_CONTATTO, 
                  @new$REF_ID_TITOLO, 
                  @new$REF_ID_ENTITA

            WHILE @@fetch_status = 0
            
               BEGIN

                  /* row-level triggers implementation: begin*/
                  BEGIN
                     IF (UPDATE(REF_ID_CONTATTO))
                        BEGIN

                           BEGIN TRY

                              IF @new$REF_ID_CONTATTO IS NOT NULL
                                 SELECT @new$REF_ID_ENTITA = isnull(RUBR_ENTITA.REF_ORG, RUBR_ENTITA.ID_REFERRAL)
                                 FROM FAXPEC.RUBR_ENTITA
                                 WHERE RUBR_ENTITA.ID_REFERRAL = 
                                    (
                                       SELECT RUBR_CONTATTI.REF_ID_REFERRAL
                                       FROM FAXPEC.RUBR_CONTATTI
                                       WHERE RUBR_CONTATTI.ID_CONTACT = @new$REF_ID_CONTATTO
                                    )

                              IF @triggerType = 'I'
                                 BEGIN
                                    IF @new$ID_MAP IS NULL
                                       SELECT @new$ID_MAP = NEXT VALUE FOR FAXPEC.RUBR_CONTATTI_BACKEND_SEQ
                                 END

                           END TRY

                           BEGIN CATCH

                              DECLARE
                                 @errornumber int

                              SET @errornumber = ERROR_NUMBER()

                              DECLARE
                                 @errormessage nvarchar(4000)

                              SET @errormessage = ERROR_MESSAGE()

                              DECLARE
                                 @exceptionidentifier nvarchar(4000)

                              SELECT @exceptionidentifier = 
                                 ssma_oracle.db_error_get_oracle_exception_id(@errormessage, @errornumber)

                              BEGIN
                                 BEGIN
                                    IF (@exceptionidentifier IS NOT NULL)
                                       BEGIN
                                          IF @errornumber = 59998
                                             RAISERROR(59998, 16, 1, @exceptionidentifier)
                                          ELSE 
                                             RAISERROR(59999, 16, 1, @exceptionidentifier)
                                       END
                                    ELSE 
                                       BEGIN
                                          EXECUTE 
                                             ssma_oracle.ssma_rethrowerror
                                       END
                                 END
                              END

                           END CATCH

                        END
                  END
                  /* row-level triggers implementation: end*/

                  /* DML-operation emulation*/
                  UPDATE FAXPEC.RUBR_CONTATTI_BACKEND
                     SET                       
                        REF_ID_CANALE = @new$REF_ID_CANALE, 
                        REF_ID_BACKEND = @new$REF_ID_BACKEND, 
                        REF_ID_CONTATTO = @new$REF_ID_CONTATTO, 
                        REF_ID_TITOLO = @new$REF_ID_TITOLO, 
                        REF_ID_ENTITA = @new$REF_ID_ENTITA
                  WHERE ID_MAP = @new$ID_MAP

                  FETCH ForEachInsertedRowTriggerCursor
                      INTO                      
                        @new$ID_MAP, 
                        @new$REF_ID_CANALE, 
                        @new$REF_ID_BACKEND, 
                        @new$REF_ID_CONTATTO, 
                        @new$REF_ID_TITOLO, 
                        @new$REF_ID_ENTITA

               END

            CLOSE ForEachInsertedRowTriggerCursor

            DEALLOCATE ForEachInsertedRowTriggerCursor

         END

GO
EXECUTE sp_addextendedproperty @name = N'MS_SSMA_SOURCE', @value = N'FAXPEC.RUBR_CONTATTI_BACKEND', @level0type = N'SCHEMA', @level0name = N'FAXPEC', @level1type = N'TABLE', @level1name = N'RUBR_CONTATTI_BACKEND';


GO
EXECUTE sp_addextendedproperty @name = N'MS_SSMA_SOURCE', @value = N'FAXPEC.RUBR_CONTATTI_BACKEND.ID_MAP', @level0type = N'SCHEMA', @level0name = N'FAXPEC', @level1type = N'TABLE', @level1name = N'RUBR_CONTATTI_BACKEND', @level2type = N'COLUMN', @level2name = N'ID_MAP';


GO
EXECUTE sp_addextendedproperty @name = N'MS_SSMA_SOURCE', @value = N'FAXPEC.RUBR_CONTATTI_BACKEND.REF_ID_CANALE', @level0type = N'SCHEMA', @level0name = N'FAXPEC', @level1type = N'TABLE', @level1name = N'RUBR_CONTATTI_BACKEND', @level2type = N'COLUMN', @level2name = N'REF_ID_CANALE';


GO
EXECUTE sp_addextendedproperty @name = N'MS_SSMA_SOURCE', @value = N'FAXPEC.RUBR_CONTATTI_BACKEND.REF_ID_BACKEND', @level0type = N'SCHEMA', @level0name = N'FAXPEC', @level1type = N'TABLE', @level1name = N'RUBR_CONTATTI_BACKEND', @level2type = N'COLUMN', @level2name = N'REF_ID_BACKEND';


GO
EXECUTE sp_addextendedproperty @name = N'MS_SSMA_SOURCE', @value = N'FAXPEC.RUBR_CONTATTI_BACKEND.REF_ID_CONTATTO', @level0type = N'SCHEMA', @level0name = N'FAXPEC', @level1type = N'TABLE', @level1name = N'RUBR_CONTATTI_BACKEND', @level2type = N'COLUMN', @level2name = N'REF_ID_CONTATTO';


GO
EXECUTE sp_addextendedproperty @name = N'MS_SSMA_SOURCE', @value = N'FAXPEC.RUBR_CONTATTI_BACKEND.REF_ID_TITOLO', @level0type = N'SCHEMA', @level0name = N'FAXPEC', @level1type = N'TABLE', @level1name = N'RUBR_CONTATTI_BACKEND', @level2type = N'COLUMN', @level2name = N'REF_ID_TITOLO';


GO
EXECUTE sp_addextendedproperty @name = N'MS_SSMA_SOURCE', @value = N'FAXPEC.RUBR_CONTATTI_BACKEND.REF_ID_ENTITA', @level0type = N'SCHEMA', @level0name = N'FAXPEC', @level1type = N'TABLE', @level1name = N'RUBR_CONTATTI_BACKEND', @level2type = N'COLUMN', @level2name = N'REF_ID_ENTITA';


GO
EXECUTE sp_addextendedproperty @name = N'MS_SSMA_SOURCE', @value = N'FAXPEC.RUBR_CONTATTI_BACKEND.RUBR_CONTATTI_BACKEND_PK', @level0type = N'SCHEMA', @level0name = N'FAXPEC', @level1type = N'TABLE', @level1name = N'RUBR_CONTATTI_BACKEND', @level2type = N'CONSTRAINT', @level2name = N'RUBR_CONTATTI_BACKEND_PK';

